Python 3.9.1 (tags/v3.9.1:1e5d33e, Dec  7 2020, 17:08:21) [MSC v.1927 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license()" for more information.
>>> num={'one','two','three'}
>>> num
{'three', 'one', 'two'}
>>> num
{'three', 'one', 'two'}
>>> #집합은 순서가 없기 때문에 이런식으로 출력이 된다!!
>>> type(num)
<class 'set'>
>>> #set함수가 집합이다.
>>> len(num)
3
>>> #비어있는 집합 만들기도 가능
>>> set1=set()
>>> #비어있는 집합=공집합
>>> set1
set()
>>> s1={1,2,3,(1,2,3,),4}
>>> #튜플도 정수와 함께 집합의 자료형이 될 수 있다.
>>> len(s1)
5
>>> #튜플을 하나로 쳐서 5개이다.
>>> #리스트도 들어갈 수 있는지 확인해 보자
>>> s2={1,2,3,[1,2,3],4}
Traceback (most recent call last):
  File "<pyshell#16>", line 1, in <module>
    s2={1,2,3,[1,2,3],4}
TypeError: unhashable type: 'list'
>>> #튜플은 집합에 될 수 있지만 리스트는 집합의 요소가 될 수 없다.
>>> #집합에서 사용가능한 메소드를 둘러보자!
>>> s1.add(6)
>>> s1
{1, 2, 3, 4, 6, (1, 2, 3)}
>>> #집합은 순서가 없는 자료형이기 때문에 집합의 마음대로 기분에 따라서 나온다.
>>> s1.discard(1)
>>> s1
{2, 3, 4, 6, (1, 2, 3)}
>>> #discard()메소드를 사용해 1이 사라진 모습을 확인 할 수 있다.
>>> s1.remove(3)
>>> s1
{2, 4, 6, (1, 2, 3)}
>>> #remove()도 discard()처럼 집합에서 요소를 뺄 수 있다.
>>> s1.discard(8)
>>> s1
{2, 4, 6, (1, 2, 3)}
>>> s1.remove(8)
Traceback (most recent call last):
  File "<pyshell#30>", line 1, in <module>
    s1.remove(8)
KeyError: 8
>>> #discard()와 remove()의 차이점은 remove를 썼을때 없는 요소를 삭제하면 오류가 나지만 discard는 조금 멍청한지 오류가 나지 않는다는 차이점이 있다.
>>> num=s1.pop()
>>> num
2
>>> #집합에서 임의의 값을 삭제해 주는것이 pop이다.
>>> set1={100,200,300,400}
>>> set2=set1.copy()
>>> set2
{200, 100, 400, 300}
>>> id(set1),id(set2)
(2670744705504, 2670744705056)
>>> #id()는 주소값을 확인해주는 메소드이다. 복사해서 내용은 똑같지만 주소가 다르기 때문에 서로 다른 객체이다.
>>> s1={1,2,3}
>>> s2=s1
>>> id(s1),id(s2)
(2670745137216, 2670745137216)
>>> #s2는 s1를 *참조*하기 때문에 id()주소값도 같다. 집합에서만 그런것은  아니고 다른 리스트나 튜플도 같은 법칙이 적용된다.
>>> s1.clear()
>>> s1,s2
(set(), set())
>>> #s2가 계속 참조중이기 때문에 s1이 비어지면 s2도 실시간 업데이트 된걸 참조 한다. 그래서 s1,s2들이 같이 비어져 있다.
>>> set1,set2
({200, 100, 400, 300}, {200, 100, 400, 300})
>>> set1.clear()
>>> set1,set2
(set(), {200, 100, 400, 300})
>>> #일반 수학개념을 가지는 메소드 들도 존재한다. 둘러보자!
>>> s1={1,2,3,}
>>> s2={3,2,1,}
>>> s1==s2
True
>>> s3={1,2,3,4,5}
>>> s1<s3
True
>>> #s1은 s3의 부분집합이다.라는 뜻. 크다작다가 아니다.
>>> s1>s3
False
>>> s1.issubset(s3)
True
>>> #issubset()이랑 < 및 >기호는 같은 질문이다.
>>> 5 in s3
True
>>> #s3에 5가 들어있는가? 라는 뜻 이다.
>>> #파이프라인|는 합집합이라는 뜻.
>>> s2={2,4,5}
>>> s1|s2
{1, 2, 3, 4, 5}
>>> #집합은 중복을 허용하지 않기 때문에 1,2,3이 두번 들어가지 않았다.
>>> s1.union(s2)
{1, 2, 3, 4, 5}
>>> #|이랑 union()랑 같은 뜻
>>> s1&s2
{2}
>>> s1.intersection(s2)
{2}
>>> #집합&집합 은 교집합 그리고 intersection()또한 교집합 메소드 이다.
>>> s1-s2
{1, 3}
>>> s1.difference(s2)
{1, 3}
>>> #집합-집합이나 집합.difference(집합) 메소드는 차집합으로 같다.

